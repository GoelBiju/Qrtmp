
NOTE: The notes below are taken from the rtmplite project and have been slightly modified -
     (https://github.com/theintencity/rtmplite/)

How the header format works:
----------------------------

NOTE: Here is a part of the documentation to understand how the Chunks' headers work.
      To have a complete documentation, YOU HAVE TO READ RTMP Specification V1.0 (rtmp_specification_1.0.pdf) -
      http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf (page 13 onwards).

This is the format of a chunk. Here, we store all except the chunk data:
------------------------------------------------------------------------
+-------------+----------------+-------------------+--------------+
| Basic header|Chunk Msg Header|Extended Time Stamp|   Chunk Data |
+-------------+----------------+-------------------+--------------+

This are the formats of the basic header:
-----------------------------------------
 0 1 2 3 4 5 6 7      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|fmt|   cs id   |    |fmt|     0     |   cs id - 64  |    |fmt|     1     |        cs id - 64             |
+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  (cs id < 64)            (64 <= cs id < 320)                           (320 <= cs id)

'fmt' stores the format of the chunk message header. There are four different formats.


Type 0 (fmt=00):
----------------
fmt = 00 (binary) / fmt = 0 (decimal)

This type MUST be used at the start of a chunk stream, and whenever the stream timestamp goes backward (e.g., because
of a backwards seek).


 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      timestamp                |                message length                 |message type id|                message stream id              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


Type 1 (fmt=01):
----------------
fmt = 01 (binary) / fmt = 1 (decimal)

Streams with variable-sized messages (for example, many video formats) SHOULD use this format for the first chunk
of each new message after the first.

 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                timestamp delta                |                message length                 |message type id|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


Type 2 (fmt=10):
----------------
fmt = 10 (binary) / fmt = 2 (decimal)

Streams with constant-sized messages (for example, some audio and data formats) SHOULD use this format for the first
chunk of each message after the first.

 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                timestamp delta                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


Type 3 (fmt=11):
----------------
fmt=11 (binary)/ fmt=3 (decimal)


Chunks of Type 3 have no header. Stream ID, message length and timestamp delta are not present; chunks of this type take
values from the preceding chunk. When a single message is split into chunks, all chunks of a message except the first
one, SHOULD use this type.


Extended Timestamp:
-------------------
NOTE: Type 3 chunks MUST NOT have this field.
      This field MUST NOT be present if the timestamp field is not present.
      If normal timestamp is set to any value less than 0x00ffffff, this field MUST NOT be present.

This field is transmitted only when the normal time stamp in the chunk message header is set to 0x00ffffff.
This field, if transmitted, is located immediately after the chunk message header and before the chunk data.

Standard Chunk Stream ID Assignments:
-------------------------------------
/**
 * the chunk stream id used for some under-layer message,
 * for example, the PC(protocol control) message.
 */
RTMP_CID_ProtocolControl                0x02

/**
 * the AMF0/AMF3 command message, invoke method and return the result, over NetConnection.
 * generally use 0x03.
 */
RTMP_CID_OverConnection                 0x03

/**
 * the AMF0/AMF3 command message, invoke method and return the result, over NetConnection,
 * the midst state(we guess).
 * rarely used, e.g. onStatus(NetStream.Play.Reset).
 */
RTMP_CID_OverConnection2                0x04

/**
 * the stream message(amf0/amf3), over NetStream.
 * generally use 0x05.
 */
RTMP_CID_OverStream                     0x05

/**
 * the stream message(amf0/amf3), over NetStream, the midst state(we guess).
 * rarely used, e.g. play("mp4:mystream.f4v")
 */
RTMP_CID_OverStream2                    0x08

/**
 * the stream message(video), over NetStream
 * generally use 0x06.
 */
RTMP_CID_Video                          0x06

/**
 * the stream message(audio), over NetStream.
 * generally use 0x07.
 */
RTMP_CID_Audio                          0x07


Sending Audio/Video Data (message type 8/9):
------------------------------------

NOTE: When using the channel, it is equal to the format + whatever chunk stream ID the RTMP messages are to be sent on.

When we send the video data we initially send a packet in which:

Initial packet:
    • header:
        - format WILL BE 0
        - a chunk stream id

        - timestamp (absolute)
        - message (body) size
        - message type id
        - message stream id

    • body:
        - Control type (sometimes keyframe e.g. 0x12 - keyframes may have times at which they are sent e.g. every 50
                        formats of video data sent we send a keyframe)
        - Audio/Video data (sometimes FLV data e.g. Sorenson H263/MP3)

Remaining formats:
    • header:
        - format SHOULD BE 3 (if it is audio we are sending and the body size is the same, we can send on format 2)
        - same chunk stream id

        - timestamp (delta)
        - message (body) size
        - message type id

    • body:
        - Control type (sometimes inter-frames/disposable frames e.g. 0x22/0x32 / 0x22 (MP3 control type))
        - Video data (sometimes FLV data e.g Sorenson H.263/ MP3)


Calculating timestamp delta:
--------------------------

Roughly get the time the previous packet was sent at (in seconds) to 3 decimal places.
Get the time at which the new packet has been completely assembled and ready to send with a similar accuracy.
Take away the latest from the earlier and times the answer by 1000 to return our timestamp delta roughly.
"""